　ハイパーバイザ型の仮想環境では、ハイパーバイザがどの物理CPUを
どの仮想CPUに割り当てるかを決定する。つまり、ハイパーバイザがCPU資源の
スケジューリングを行っている。そのため、ゲストOSの状態を考慮せずに仮想
CPUの切り替えが行われてしまうことがある。これは、ゲストOSでスピンロックが
確保された状態で仮想CPUが切り替えられる際に問題を引き起こす。この時、スピン
ロックは解放されないため、この仮想CPUが再びスケジューリングされるまで、ロックを
確保しようとする他の仮想CPUは多くの時間をビジーウェイトに費やすことになる。これは
スライドにも紹介されているLock Holder Preemptionという問題である。

　チケットロックの場合はこの問題はさらに深刻になる。なぜなら、次にロックを確保できる
仮想CPUの順番が定まっているチケットロックでは、順番が早い仮想CPUは事実上順番が遅い
仮想CPUに対してロックを確保している状態になる。つまり、現在ロックを確保している仮想CPUだけでなく、
ロック待ちの仮想CPUがプリエンプトされることによっても、その仮想CPUよりも遅い順番でロックを確保しようとする
仮想CPUは影響を受けることになる。これによって、ロックが解放されて使用可能な状態にあっても、ロックを確保する
ことが出来ずに仮想CPUがビジーウェイト状態になるという問題が生じる。この問題はLock Waiter Preemptionと呼ばれ、
仮想環境でコアの数が増えた際にチケットロックがスピンロックやその他のロックよりも非効率となる原因となる。