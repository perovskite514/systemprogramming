　割り込みについて
　利点
・デバイスからの割り込み通知をCPUが待つ間にCPUが自由であり、別の処理を行うことが可能な点。
　欠点
・割り込みの本体処理の開始と復帰にコストがかかる点。
・ハードウェアやOSに依存している点。これは各割り込み信号での処理などを事前に設定しておく必要があるということである。
　
　ポーリングについて
　利点
・ループを繰り返して待つという動作自体のコストは小さく、また簡単に実装可能な点。
　欠点
・デバイスが準備可能になるまで、CPUが他の処理を行えない点。

　基本的にはCPUのクロックサイクルを消費しない点で割り込みが優秀であると思われるが、特定の状況では
ポーリングを使用するのがよいと思われる。
　例えば、I/Oが頻繁に起こるケースが挙げられる。この場合は割り込みでI/Oを行う場合コンテキストスイッチが
頻繁に起こり、その分のコストが大きくなる。また、多くのタスクをCPUが行っている場合は割り込みによるタスクの
一時停止がリスクになる。このような場合だと、ポーリングの方が効率が良い場合があると考えられる。
　また、When Poll Is Better than Interrupt [FAST‘12]によると、新技術を用いた不揮発性メモリを用いた低遅延デバイスに
よるストレージI/Oの場合にポーリングの方が従来の割り込み方式よりも高いパフォーマンスを発揮している。これについては、
ポーリングによる同期I/Oの場合カーネルパスの短さによるCPUのクロックサイクルの短縮の利点がある。これと割り込みによる
非同期I/Oのオーバーヘッドの分を考慮すると、ポーリングによる同期I/Oの方が高速に個々のI/Oが完了する。また、ポーリング
におけるスピンの時間は割り込みによるオーバーヘッドよりも小さい。また、このようなデバイスの場合、スタックレイテンシーの
影響も大きくなり、この点でもポーリングは有利になる。